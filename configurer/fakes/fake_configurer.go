// This file was generated by counterfeiter
package fakes

import (
	"sync"

	cf_tcp_router "github.com/GESoftware-CF/cf-tcp-router"
	"github.com/GESoftware-CF/cf-tcp-router/configurer"
)

type FakeRouterConfigurer struct {
	CreateExternalPortMappingsStub        func(mappingRequests cf_tcp_router.MappingRequests) error
	createExternalPortMappingsMutex       sync.RWMutex
	createExternalPortMappingsArgsForCall []struct {
		mappingRequests cf_tcp_router.MappingRequests
	}
	createExternalPortMappingsReturns struct {
		result1 error
	}
}

func (fake *FakeRouterConfigurer) CreateExternalPortMappings(mappingRequests cf_tcp_router.MappingRequests) error {
	fake.createExternalPortMappingsMutex.Lock()
	fake.createExternalPortMappingsArgsForCall = append(fake.createExternalPortMappingsArgsForCall, struct {
		mappingRequests cf_tcp_router.MappingRequests
	}{mappingRequests})
	fake.createExternalPortMappingsMutex.Unlock()
	if fake.CreateExternalPortMappingsStub != nil {
		return fake.CreateExternalPortMappingsStub(mappingRequests)
	} else {
		return fake.createExternalPortMappingsReturns.result1
	}
}

func (fake *FakeRouterConfigurer) CreateExternalPortMappingsCallCount() int {
	fake.createExternalPortMappingsMutex.RLock()
	defer fake.createExternalPortMappingsMutex.RUnlock()
	return len(fake.createExternalPortMappingsArgsForCall)
}

func (fake *FakeRouterConfigurer) CreateExternalPortMappingsArgsForCall(i int) cf_tcp_router.MappingRequests {
	fake.createExternalPortMappingsMutex.RLock()
	defer fake.createExternalPortMappingsMutex.RUnlock()
	return fake.createExternalPortMappingsArgsForCall[i].mappingRequests
}

func (fake *FakeRouterConfigurer) CreateExternalPortMappingsReturns(result1 error) {
	fake.CreateExternalPortMappingsStub = nil
	fake.createExternalPortMappingsReturns = struct {
		result1 error
	}{result1}
}

var _ configurer.RouterConfigurer = new(FakeRouterConfigurer)
